input,output,BEST,GROUND,tags
"6
a b c aa d b
1 2 3 4 5 6
3
1 5 caaab
0 4 xyz
2 4 bcdybc",0 19,"['import java.io.ByteArrayInputStream;', 'import java.io.IOException;', 'import java.io.InputStream;', 'import java.io.PrintWriter;', 'import java.util.ArrayDeque;', 'import java.util.Arrays;', 'import java.util.InputMismatchException;', 'import java.util.Queue;', '', 'public class C3 {', ' InputStream is;', ' PrintWriter out;', ' String INPUT = """";', ' ', ' void solve()', ' {', '  int n = ni();', '  char[][] ss = new char[n][];', '  for(int i = 0;i < n;i++){', '   ss[i] = ns().toCharArray();', '  }', '  int[] h = na(n);', '  ', '  int Q = ni();', '  char[][] qs = new char[Q][];', '  long[] es = new long[2*Q];', '  for(int i = 0;i < Q;i++){', '   int s = ni(), t = ni();', '   qs[i] = ns().toCharArray();', '   es[i] = (long)s<<32|(long)i<<1|0;', '   es[i+Q] = (long)t+1<<32|(long)i<<1|1;', '  }', '  Arrays.sort(es);', '  long[] rets = new long[Q];', '  TrieByLink[] tries = new TrieByLink[18];', '  int p = 0;', '  for(long e : es){', '   long x = e>>>32;', '   int ind = ((int)e)>>>1;', '   int pm = (e&1) == 0 ? -1 : 1;', '   while(p < n && p <= x-1){', '    int d = Integer.numberOfTrailingZeros(p+1);', '    tries[d] = new TrieByLink();', '    for(int k = p-(1<<d)+1;k <= p;k++){', '     tries[d].add(ss[k], h[k]);', '    }', '    tries[d].buildFailure();', '    p++;', '   }', '   long lhit = 0;', '   for(int d = 0;d < 18;d++){', '    if(p<<~d<0){', '     lhit += tries[d].countHit(qs[ind]);', '    }', '   }', '   rets[ind] += lhit*pm;', '  }', '  long min = Long.MAX_VALUE;', '  long max = Long.MIN_VALUE;', '  for(long r : rets)min = Math.min(min, r);', '  for(long r : rets)max = Math.max(max, r);', '  ', '  out.println(min + "" "" + max);', ' }', ' ', ' public static class TrieByLink {', '  public Node root = new Node((char)0, 0);', '  public int gen = 1;', '  public static final char[] atoz = ""abcdefghijklmnopqrstuvwxyz"".toCharArray();', '  ', '  public static class Node', '  {', '   public int id;', '   public char c;', '   public Node next, firstChild;', '   public long hit = 0;', '   ', '   public Node fail;', '   ', '   public Node(char c, int id)', '   {', '    this.id = id;', '    this.c = c;', '   }', '   ', '   public String toString(String indent)', '   {', '    StringBuilder sb = new StringBuilder();', '    sb.append(indent + id + "":"" + c);', '    if(hit != 0)sb.append("" H:"" + hit);', '    if(fail != null)sb.append("" F:"" + fail.id);', '    sb.append(""\\n"");', '    for(Node c = firstChild;c != null; c = c.next){', '     sb.append(c.toString(indent + ""  ""));', '    }', '    return sb.toString();', '   }', '  }', '  ', '  public void add(char[] s, long hit)', '  {', '   Node cur = root;', '   Node pre = null;', '   for(char c : s){', '    pre = cur; cur = cur.firstChild;', '    if(cur == null){', '     cur = pre.firstChild = new Node(c, gen++);', '    }else{', '     for(;cur != null && cur.c != c;pre = cur, cur = cur.next);', '     if(cur == null)cur = pre.next = new Node(c, gen++);', '    }', '   }', '   cur.hit += hit;', '  }', '  ', '  public void buildFailure()', '  {', '   root.fail = null;', '   Queue<Node> q = new ArrayDeque<Node>();', '   q.add(root);', '   while(!q.isEmpty()){', '    Node cur = q.poll();', '    inner:', '    for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '     q.add(ch);', '     for(Node to = cur.fail; to != null; to = to.fail){', '      for(Node lch = to.firstChild;lch != null; lch = lch.next){', '       if(lch.c == ch.c){', '        ch.fail = lch;', '        ch.hit += lch.hit; // propagation of hit', '        continue inner;', '       }', '      }', '     }', '     ch.fail = root;', '    }', '   }', '  }', '  ', '  public Node next(Node cur, char c)', '  {', '   for(;cur != null;cur = cur.fail){', '    for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '     if(ch.c == c)return ch;', '    }', '   }', '   return root;', '  }', '  ', '  public int[][] ngMatrix(char[] cs)', '  {', '   int[] map = new int[128];', '   Arrays.fill(map, -1);', '   for(int i = 0;i < cs.length;i++)map[cs[i]] = i;', '   ', '   int[][] a = new int[gen+1][gen+1];', '   Node[] nodes = toArray();', '   for(int i = 0;i < gen;i++){', '    if(nodes[i].hit > 0)continue;', '    int nohit = cs.length;', '    boolean[] ved = new boolean[cs.length];', '    for(Node cur = nodes[i];cur != null;cur = cur.fail){', '     for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '      if(map[ch.c] >= 0 && !ved[map[ch.c]]){', '       ved[map[ch.c]] = true;', '       if(ch.hit == 0)a[ch.id][i]++;', '       nohit--;', '      }', '     }', '    }', '    a[0][i] += nohit;', '   }', '   Arrays.fill(a[gen], 1);', '   return a;', '  }', '  ', '  public int[][] okMatrix(char[] cs)', '  {', '   int[] map = new int[128];', '   Arrays.fill(map, -1);', '   for(int i = 0;i < cs.length;i++)map[cs[i]] = i;', '   ', '   int[][] a = new int[gen+1][gen+1];', '   Node[] nodes = toArray();', '   for(int i = 0;i < gen;i++){', '    if(nodes[i].hit > 0)continue;', '    int nohit = cs.length;', '    boolean[] ved = new boolean[cs.length];', '    for(Node cur = nodes[i];cur != null;cur = cur.fail){', '     for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '      if(map[ch.c] >= 0 && !ved[map[ch.c]]){', '       ved[map[ch.c]] = true;', '       if(ch.hit > 0){', '        a[gen][i]++;', '       }else{', '        a[ch.id][i]++;', '       }', '       nohit--;', '      }', '     }', '    }', '    a[0][i] += nohit;', '   }', '   a[gen][gen]++;', '   return a;', '  }', '  ', '  public void search(char[] q)', '  {', '   Node cur = root;', '   outer:', '   for(char c : q){', '    for(;cur != null;cur = cur.fail){', '     for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '      if(ch.c == c){', '       // ch.hit', '       cur = ch;', '       continue outer;', '      }', '     }', '    }', '    cur = root;', '   }', '  }', '  ', '  public long countHit(char[] q)', '  {', '   Node cur = root;', '   long hit = 0;', '   outer:', '   for(char c : q){', '    for(;cur != null;cur = cur.fail){', '     for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '      if(ch.c == c){', '       hit += ch.hit; // add hit', '       cur = ch;', '       continue outer;', '      }', '     }', '    }', '    cur = root;', '   }', '   return hit;', '  }', '  ', '  public Node[] toArray()', '  {', '   Node[] ret = new Node[gen];', '   ret[0] = root;', '   for(int i = 0;i < gen;i++){', '    Node cur = ret[i];', '    if(cur.next != null)ret[cur.next.id] = cur.next;', '    if(cur.firstChild != null)ret[cur.firstChild.id] = cur.firstChild;', '   }', '   return ret;', '  }', '  ', '  public String toString()', '  {', '   return root.toString("""");', '  }', ' }', ' ', ' void run() throws Exception', ' {', '  is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());', '  out = new PrintWriter(System.out);', '  ', '  long s = System.currentTimeMillis();', '  solve();', '  out.flush();', '  if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+""ms"");', ' }', ' ', ' public static void main(String[] args) throws Exception { new C3().run(); }', ' ', ' private byte[] inbuf = new byte[1024];', ' public int lenbuf = 0, ptrbuf = 0;', ' ', ' private int readByte()', ' {', '  if(lenbuf == -1)throw new InputMismatchException();', '  if(ptrbuf >= lenbuf){', '   ptrbuf = 0;', '   try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }', '   if(lenbuf <= 0)return -1;', '  }', '  return inbuf[ptrbuf++];', ' }', ' ', ' private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }', ' private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }', ' ', ' private double nd() { return Double.parseDouble(ns()); }', ' private char nc() { return (char)skip(); }', ' ', ' private String ns()', ' {', '  int b = skip();', '  StringBuilder sb = new StringBuilder();', ""  while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')"", '   sb.appendCodePoint(b);', '   b = readByte();', '  }', '  return sb.toString();', ' }', ' ', ' private char[] ns(int n)', ' {', '  char[] buf = new char[n];', '  int b = skip(), p = 0;', '  while(p < n && !(isSpaceChar(b))){', '   buf[p++] = (char)b;', '   b = readByte();', '  }', '  return n == p ? buf : Arrays.copyOf(buf, p);', ' }', ' ', ' private char[][] nm(int n, int m)', ' {', '  char[][] map = new char[n][];', '  for(int i = 0;i < n;i++)map[i] = ns(m);', '  return map;', ' }', ' ', ' private int[] na(int n)', ' {', '  int[] a = new int[n];', '  for(int i = 0;i < n;i++)a[i] = ni();', '  return a;', ' }', ' ', ' private int ni()', ' {', '  int num = 0, b;', '  boolean minus = false;', ""  while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));"", ""  if(b == '-'){"", '   minus = true;', '   b = readByte();', '  }', '  ', '  while(true){', ""   if(b >= '0' && b <= '9'){"", ""    num = num * 10 + (b - '0');"", '   }else{', '    return minus ? -num : num;', '   }', '   b = readByte();', '  }', ' }', ' ', ' private long nl()', ' {', '  long num = 0;', '  int b;', '  boolean minus = false;', ""  while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));"", ""  if(b == '-'){"", '   minus = true;', '   b = readByte();', '  }', '  ', '  while(true){', ""   if(b >= '0' && b <= '9'){"", ""    num = num * 10 + (b - '0');"", '   }else{', '    return minus ? -num : num;', '   }', '   b = readByte();', '  }', ' }', ' ', ' private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }', '}']","['import java.io.ByteArrayInputStream;', 'import java.io.IOException;', 'import java.io.InputStream;', 'import java.io.PrintWriter;', 'import java.util.ArrayDeque;', 'import java.util.Arrays;', 'import java.util.InputMismatchException;', 'import java.util.Queue;', '', 'public class C3 {', '    InputStream is;', '    PrintWriter out;', '    String INPUT = """";', '    ', '    void solve()', '    {', '        int n = ni();', '        char[][] ss = new char[n][];', '        for(int i = 0;i < n;i++){', '            ss[i] = ns().toCharArray();', '        }', '        int[] h = na(n);', '        ', '        int Q = ni();', '        char[][] qs = new char[Q][];', '        long[] es = new long[2*Q];', '        for(int i = 0;i < Q;i++){', '            int s = ni(), t = ni();', '            qs[i] = ns().toCharArray();', '            es[i] = (long)s<<32|(long)i<<1|0;', '            es[i+Q] = (long)t+1<<32|(long)i<<1|1;', '        }', '        Arrays.sort(es);', '        long[] rets = new long[Q];', '        TrieByLink[] tries = new TrieByLink[18];', '        int p = 0;', '        for(long e : es){', '            long x = e>>>32;', '            int ind = ((int)e)>>>1;', '            int pm = (e&1) == 0 ? -1 : 1;', '            while(p < n && p <= x-1){', '                int d = Integer.numberOfTrailingZeros(p+1);', '                tries[d] = new TrieByLink();', '                for(int k = p-(1<<d)+1;k <= p;k++){', '                    tries[d].add(ss[k], h[k]);', '                }', '                tries[d].buildFailure();', '                p++;', '            }', '            long lhit = 0;', '            for(int d = 0;d < 18;d++){', '                if(p<<~d<0){', '                    lhit += tries[d].countHit(qs[ind]);', '                }', '            }', '            rets[ind] += lhit*pm;', '        }', '        long min = Long.MAX_VALUE;', '        long max = Long.MIN_VALUE;', '        for(long r : rets)min = Math.min(min, r);', '        for(long r : rets)max = Math.max(max, r);', '        ', '        out.println(min + "" "" + max);', '    }', '    ', '    public static class TrieByLink {', '        public Node root = new Node((char)0, 0);', '        public int gen = 1;', '        public static final char[] atoz = ""abcdefghijklmnopqrstuvwxyz"".toCharArray();', '        ', '        public static class Node', '        {', '            public int id;', '            public char c;', '            public Node next, firstChild;', '            public long hit = 0;', '            ', '            public Node fail;', '            ', '            public Node(char c, int id)', '            {', '                this.id = id;', '                this.c = c;', '            }', '            ', '            public String toString(String indent)', '            {', '                StringBuilder sb = new StringBuilder();', '                sb.append(indent + id + "":"" + c);', '                if(hit != 0)sb.append("" H:"" + hit);', '                if(fail != null)sb.append("" F:"" + fail.id);', '                sb.append(""\\n"");', '                for(Node c = firstChild;c != null; c = c.next){', '                    sb.append(c.toString(indent + ""  ""));', '                }', '                return sb.toString();', '            }', '        }', '        ', '        public void add(char[] s, long hit)', '        {', '            Node cur = root;', '            Node pre = null;', '            for(char c : s){', '                pre = cur; cur = cur.firstChild;', '                if(cur == null){', '                    cur = pre.firstChild = new Node(c, gen++);', '                }else{', '                    for(;cur != null && cur.c != c;pre = cur, cur = cur.next);', '                    if(cur == null)cur = pre.next = new Node(c, gen++);', '                }', '            }', '            cur.hit += hit;', '        }', '        ', '        public void buildFailure()', '        {', '            root.fail = null;', '            Queue<Node> q = new ArrayDeque<Node>();', '            q.add(root);', '            while(!q.isEmpty()){', '                Node cur = q.poll();', '                inner:', '                for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '                    q.add(ch);', '                    for(Node to = cur.fail; to != null; to = to.fail){', '                        for(Node lch = to.firstChild;lch != null; lch = lch.next){', '                            if(lch.c == ch.c){', '                                ch.fail = lch;', '                                ch.hit += lch.hit; // propagation of hit', '                                continue inner;', '                            }', '                        }', '                    }', '                    ch.fail = root;', '                }', '            }', '        }', '        ', '        public Node next(Node cur, char c)', '        {', '            for(;cur != null;cur = cur.fail){', '                for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '                    if(ch.c == c)return ch;', '                }', '            }', '            return root;', '        }', '        ', '        public int[][] ngMatrix(char[] cs)', '        {', '            int[] map = new int[128];', '            Arrays.fill(map, -1);', '            for(int i = 0;i < cs.length;i++)map[cs[i]] = i;', '            ', '            int[][] a = new int[gen+1][gen+1];', '            Node[] nodes = toArray();', '            for(int i = 0;i < gen;i++){', '                if(nodes[i].hit > 0)continue;', '                int nohit = cs.length;', '                boolean[] ved = new boolean[cs.length];', '                for(Node cur = nodes[i];cur != null;cur = cur.fail){', '                    for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '                        if(map[ch.c] >= 0 && !ved[map[ch.c]]){', '                            ved[map[ch.c]] = true;', '                            if(ch.hit == 0)a[ch.id][i]++;', '                            nohit--;', '                        }', '                    }', '                }', '                a[0][i] += nohit;', '            }', '            Arrays.fill(a[gen], 1);', '            return a;', '        }', '        ', '        public int[][] okMatrix(char[] cs)', '        {', '            int[] map = new int[128];', '            Arrays.fill(map, -1);', '            for(int i = 0;i < cs.length;i++)map[cs[i]] = i;', '            ', '            int[][] a = new int[gen+1][gen+1];', '            Node[] nodes = toArray();', '            for(int i = 0;i < gen;i++){', '                if(nodes[i].hit > 0)continue;', '                int nohit = cs.length;', '                boolean[] ved = new boolean[cs.length];', '                for(Node cur = nodes[i];cur != null;cur = cur.fail){', '                    for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '                        if(map[ch.c] >= 0 && !ved[map[ch.c]]){', '                            ved[map[ch.c]] = true;', '                            if(ch.hit > 0){', '                                a[gen][i]++;', '                            }else{', '                                a[ch.id][i]++;', '                            }', '                            nohit--;', '                        }', '                    }', '                }', '                a[0][i] += nohit;', '            }', '            a[gen][gen]++;', '            return a;', '        }', '        ', '        public void search(char[] q)', '        {', '            Node cur = root;', '            outer:', '            for(char c : q){', '                for(;cur != null;cur = cur.fail){', '                    for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '                        if(ch.c == c){', '                            // ch.hit', '                            cur = ch;', '                            continue outer;', '                        }', '                    }', '                }', '                cur = root;', '            }', '        }', '        ', '        public long countHit(char[] q)', '        {', '            Node cur = root;', '            long hit = 0;', '            outer:', '            for(char c : q){', '                for(;cur != null;cur = cur.fail){', '                    for(Node ch = cur.firstChild;ch != null; ch = ch.next){', '                        if(ch.c == c){', '                            hit += ch.hit; // add hit', '                            cur = ch;', '                            continue outer;', '                        }', '                    }', '                }', '                cur = root;', '            }', '            return hit;', '        }', '        ', '        public Node[] toArray()', '        {', '            Node[] ret = new Node[gen];', '            ret[0] = root;', '            for(int i = 0;i < gen;i++){', '                Node cur = ret[i];', '                if(cur.next != null)ret[cur.next.id] = cur.next;', '                if(cur.firstChild != null)ret[cur.firstChild.id] = cur.firstChild;', '            }', '            return ret;', '        }', '        ', '        public String toString()', '        {', '            return root.toString("""");', '        }', '    }', '    ', '    void run() throws Exception', '    {', '        is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());', '        out = new PrintWriter(System.out);', '        ', '        long s = System.currentTimeMillis();', '        solve();', '        out.flush();', '        if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+""ms"");', '    }', '    ', '    public static void main(String[] args) throws Exception { new C3().run(); }', '    ', '    private byte[] inbuf = new byte[1024];', '    public int lenbuf = 0, ptrbuf = 0;', '    ', '    private int readByte()', '    {', '        if(lenbuf == -1)throw new InputMismatchException();', '        if(ptrbuf >= lenbuf){', '            ptrbuf = 0;', '            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }', '            if(lenbuf <= 0)return -1;', '        }', '        return inbuf[ptrbuf++];', '    }', '    ', '    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }', '    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }', '    ', '    private double nd() { return Double.parseDouble(ns()); }', '    private char nc() { return (char)skip(); }', '    ', '    private String ns()', '    {', '        int b = skip();', '        StringBuilder sb = new StringBuilder();', ""        while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')"", '            sb.appendCodePoint(b);', '            b = readByte();', '        }', '        return sb.toString();', '    }', '    ', '    private char[] ns(int n)', '    {', '        char[] buf = new char[n];', '        int b = skip(), p = 0;', '        while(p < n && !(isSpaceChar(b))){', '            buf[p++] = (char)b;', '            b = readByte();', '        }', '        return n == p ? buf : Arrays.copyOf(buf, p);', '    }', '    ', '    private char[][] nm(int n, int m)', '    {', '        char[][] map = new char[n][];', '        for(int i = 0;i < n;i++)map[i] = ns(m);', '        return map;', '    }', '    ', '    private int[] na(int n)', '    {', '        int[] a = new int[n];', '        for(int i = 0;i < n;i++)a[i] = ni();', '        return a;', '    }', '    ', '    private int ni()', '    {', '        int num = 0, b;', '        boolean minus = false;', ""        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));"", ""        if(b == '-'){"", '            minus = true;', '            b = readByte();', '        }', '        ', '        while(true){', ""            if(b >= '0' && b <= '9'){"", ""                num = num * 10 + (b - '0');"", '            }else{', '                return minus ? -num : num;', '            }', '            b = readByte();', '        }', '    }', '    ', '    private long nl()', '    {', '        long num = 0;', '        int b;', '        boolean minus = false;', ""        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));"", ""        if(b == '-'){"", '            minus = true;', '            b = readByte();', '        }', '        ', '        while(true){', ""            if(b >= '0' && b <= '9'){"", ""                num = num * 10 + (b - '0');"", '            }else{', '                return minus ? -num : num;', '            }', '            b = readByte();', '        }', '    }', '    ', '    private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }', '}']","['Array', 'String', 'Hash Table', 'Math', 'Dynamic Programming', 'Sorting', 'Greedy']"
"2  
5  
1 1 1 2 2  
5  
2 1 3 1 2","0  
4","['import java.io.InputStreamReader;', 'import java.io.IOException;', 'import java.io.BufferedReader;', 'import java.io.OutputStream;', 'import java.io.PrintWriter;', 'import java.io.Writer;', 'import java.util.StringTokenizer;', 'import java.io.InputStream;', '', '/**', ' * Built using CHelper plug-in', ' * Actual solution is at the top', ' * @author lwc626', ' */', 'public class Solution {', ' public static void main(String[] args) {', '  InputStream inputStream = System.in;', '  OutputStream outputStream = System.out;', '  MyInputReader in = new MyInputReader(inputStream);', '  MyOutputWriter out = new MyOutputWriter(outputStream);', '  Insertion_Sort solver = new Insertion_Sort();', '  int testCount = Integer.parseInt(in.next());', '  for (int i = 1; i <= testCount; i++)', '   solver.solve(i, in, out);', '  out.close();', ' }', '}', '', 'class Insertion_Sort {', ' public void solve(int testNumber, MyInputReader in, MyOutputWriter out) {', '        int n = in.nextInt() ;', '        int[] A = new int[ n ] ;', '        IOUtils.readIntArrays(in, A);', '        out.printLine( reverse_pair(out,A, 0 , n-1) );', ' }', '', '    private long reverse_pair(MyOutputWriter out,int[] a , int l , int r) {', '        if( l == r ) return 0 ;', '        int m = ( l + r ) / 2 ;', '        long ret = reverse_pair( out,a , l , m ) ;', '        ret += reverse_pair( out,a , m+1 , r ) ;', '', '        //out.printLine( l , r );', '        //IOUtils.printIntArrays(out , a );', '        int [] tmp = new int[ r - l + 1];', '        int nl = l , nr = m+1 , n = 0;', '        while ( nl <= m && nr <= r ){', '            if( a[nl] <= a[nr] ){', '                tmp[n++] = a[nl++] ;', '                ret += nr - m -1 ;', '            }else{', '                tmp[n++] = a[nr++] ;', '            }', '        }', '        while ( nl <= m ) { tmp[ n ++ ] = a[ nl ++ ]; ret += nr-m-1;}', '        while ( nr <= r ) tmp[ n ++ ] = a[ nr ++ ];', '        System.arraycopy( tmp , 0 , a , l, n );', '        return ret;', '    }', '}', '', 'class MyInputReader {', '    private BufferedReader reader;', '    private StringTokenizer tokenizer;', '', '    public MyInputReader(InputStream stream) {', '        reader = new BufferedReader(new InputStreamReader(stream));', '        tokenizer = null;', '    }', '', '    public String next() {', '        while (tokenizer == null || !tokenizer.hasMoreTokens()) {', '            try {', '                tokenizer = new StringTokenizer(reader.readLine());', '            } catch (IOException e) {', '                throw new RuntimeException(e);', '            }', '        }', '        return tokenizer.nextToken();', '    }', '', '    public int nextInt() {', '        return Integer.parseInt(next());', '    }', '    ', '    }', '', 'class MyOutputWriter {', '    private final PrintWriter writer;', '', '    public MyOutputWriter(OutputStream outputStream) {', '        writer = new PrintWriter(outputStream);', '    }', '', '    public MyOutputWriter(Writer writer) {', '        this.writer = new PrintWriter(writer);', '    }', '', '    public void print(Object...objects) {', '        for (int i = 0; i < objects.length; i++) {', '            if (i != 0)', ""                writer.print(' ');"", '            writer.print(objects[i]);', '        }', '    }', '', '    public void printLine(Object...objects) {', '        print(objects);', '        writer.println();', '    }', '', '    public void close() {', '        writer.close();', '    }', '', '}', '', 'class IOUtils {', '    public static void readIntArrays( MyInputReader in,int[]... arrays ){', '        for(int i = 0 ; i < arrays[0].length; i++ )', '            for( int j = 0 ; j < arrays.length ; j ++ )', '                arrays[j][i] = in.nextInt();', '    }', '    }']","['import java.io.*;', 'import java.math.*;', 'import java.security.*;', 'import java.text.*;', 'import java.util.*;', 'import java.util.concurrent.*;', 'import java.util.regex.*;', '', 'public class Solution {', '', '    public static void main(String[] args) {', '', '        Scanner in = new Scanner(System.in);', '        int t = in.nextInt();', '', '        for (int i = 0; i < t; i++) {', '            int n = in.nextInt();', '            int[] ar = new int[n];', '            for (int j = 0; j < n; j++) {', '                ar[j] = in.nextInt();', '                //System.err.println(ar[j]);', '            }', '            long c = insertSort(ar);', '            System.out.println(c);', '        }', '    }', '', '    static long count = 0;', '', '    public static void mergesort(int[] arr, int p, int r) {', '        int q = (p + r) / 2;', '        if (p < r) {', '            mergesort(arr, p, q);', '            mergesort(arr, q + 1, r);', '            merge(arr, p, q, r);', '        }', '    }', '', '    public static void merge(int[] arr, int p, int q, int r) {', '        int[] left = new int[q - p + 1];', '        int[] right = new int[r - q];', '        for (int i = 0; i < left.length; i++) {', '            left[i] = arr[p + i];', '        }', '        for (int i = 0; i < right.length; i++) {', '            right[i] = arr[q + i + 1];', '        }', '', '        int i = 0, j = 0;', '        for (int k = p; k <= r; k++) {', '            if (i < left.length && j < right.length) {', '                if (left[i] <= right[j]) {', '                    arr[k] = left[i];', '                    i++;', '                } else {', '                    arr[k] = right[j];', '                    count += left.length - i;', '                    j++;', '                }', '            } else {', '                if (i < left.length) {', '                    arr[k] = left[i];', '                    i++;', '                } else if (j < right.length) {', '                    arr[k] = right[j];', '                    j++;', '                }', '            }', '        }', '    }', '', '    public static long insertSort(int[] ar) {', '        count = 0;', '        mergesort(ar, 0, ar.length - 1);', '        return count;', '', '    }', '}']","['Array', 'Sorting', 'Math', 'Binary Search', 'Recursion', 'Concurrency', 'Greedy']"
